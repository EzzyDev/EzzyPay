openapi: 3.0.0
info:
  title: Ezzy Pay
  version: '1.0'
  description: Payment API for making bulk transactions between third-party applications and Ezzy
  contact:
    name: Egor
    email: en@mediacube.network
  termsOfService: 'https://apidocks.ezzy.co/terms'
servers:
  - url: 'https://ezzy.co'
    description: Production
  - description: Development
    url: 'https://id.mediacube.dev'
paths:
  /oauth/token:
    post:
      summary: Authentication
      operationId: post-oauth-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token_type:
                    type: string
                    enum:
                      - bearer
                  expires_in:
                    type: string
                  access_token:
                    type: string
                required:
                  - token_type
                  - expires_in
                  - access_token
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
                  error_message:
                    type: string
                required:
                  - error
                  - error_description
                  - error_message
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: authorization types. see description in Constant-Codes.md
                client_id:
                  type: string
                client_secret:
                  type: string
                scopes:
                  type: string
                code:
                  type: string
                redirect_url:
                  type: string
                  format: uri
              required:
                - grant_type
                - client_id
                - client_secret
            examples:
              partner:
                value:
                  grant_type: partner
                  client_id: '1'
                  client_secret: secret
              authorization_code:
                value:
                  grant_type: authorization_code
                  client_id: '1'
                  client_secret: secret
                  scopes: user.channels user.common user.contacts
                  code: hjgsfugdskhgvklundfluvhdfnlvhls
                  redirect_url: 'https://yourapp.com/endpoint'
        description: |-
          If the grant_type "partner" is used then code ,redirect_url and scopes do not use
          If the authentication_code is used, then code and redirect_url are required.
      description: Gaining access
      tags:
        - Auth
  /oauth/user:
    get:
      summary: '[OAuth] User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  email:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  lang:
                    type: string
                  wallet:
                    type: string
                  sub_user:
                    type: object
                    required:
                      - id
                      - email
                      - first_name
                      - last_name
                      - lang
                      - wallet
                      - country
                    description: if user logged in as natural person it return null in the subuser object
                    properties:
                      id:
                        type: number
                      email:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      lang:
                        type: string
                      wallet:
                        type: string
                      country:
                        $ref: '#/components/schemas/Country'
                  country:
                    $ref: '#/components/schemas/Country'
                  kyc_status:
                    type: integer
                    enum:
                      - 1
                      - 2
                      - 3
                  is_confirmed:
                    type: boolean
                    description: статус подтверждения почты
                required:
                  - id
                  - email
                  - first_name
                  - last_name
                  - lang
                  - wallet
                  - sub_user
                  - country
      operationId: get-oauth-user
      description: |-
        Getting information about the user by the token

        If the user logged in as a company, then in the user fields returns company information, and in the subuser - curent user in the company
      parameters: []
      tags:
        - User
      security:
        - User Authorization: []
  /oauth/user/channels:
    get:
      summary: '[OAuth] Scope User Channels'
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    youtube_id:
                      type: string
                    title:
                      type: string
                    published_at:
                      type: string
                      format: date
                      example: '2020-05-12'
                    views_count:
                      type: number
                    subscribers_count:
                      type: number
                    videos_count:
                      type: number
                  required:
                    - youtube_id
                    - title
                    - published_at
                    - views_count
                    - subscribers_count
                    - videos_count
      operationId: get-oauth-user-channels
      description: 'scope name: user.channels'
      parameters: []
      tags:
        - User
      security:
        - User Authorization:
            - user.channels
  /oauth/user/common:
    get:
      summary: '[OAuth] Scope User Common'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  common:
                    type: object
                    properties:
                      name:
                        type: string
                        description: first name + last name
                      email:
                        type: string
                        format: email
                      lang:
                        type: string
                        description: xx - Language format from ISO
                      is_confirmed:
                        type: boolean
                      avatar:
                        type: string
                        format: uri
                      wallet:
                        type: string
                      profile:
                        $ref: '#/components/schemas/Profile'
                      birthday:
                        type: string
                      sex:
                        type: boolean
                      country_id:
                        type: number
                      country:
                        $ref: '#/components/schemas/Country'
                      sub_user:
                        type: object
                        properties:
                          common:
                            type: object
                            required:
                              - name
                              - email
                              - lang
                              - is_confirmed
                              - avatar
                              - wallet
                              - profile
                              - birthday
                              - sex
                              - country_id
                              - country
                            properties:
                              name:
                                type: string
                              email:
                                type: string
                              lang:
                                type: string
                              is_confirmed:
                                type: boolean
                              avatar:
                                type: string
                              wallet:
                                type: string
                              profile:
                                $ref: '#/components/schemas/Profile'
                              birthday:
                                type: string
                              sex:
                                type: string
                              country_id:
                                type: number
                              country:
                                $ref: '#/components/schemas/Country'
                    required:
                      - name
                      - email
                      - lang
                      - is_confirmed
                      - avatar
                      - wallet
                      - profile
                      - birthday
                      - sex
                      - country_id
                      - country
                      - sub_user
      operationId: get-oauth-user-common
      description: User unformation is in English only
      parameters: []
      tags:
        - User
      security:
        - User Authorization:
            - user.common
  /oauth/user/contacts:
    get:
      summary: '[OAuth] Scope User Contacts'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
                  sub_user:
                    type: object
                    required:
                      - contracts
                    properties:
                      contracts:
                        type: array
                        items:
                          $ref: '#/components/schemas/Contact'
                required:
                  - contacts
                  - sub_user
      operationId: get-oauth-user-contacts
      description: 'scope name: user.contacts'
      parameters: []
      tags:
        - User
      security:
        - User Authorization:
            - user.contacts
  /payments:
    post:
      summary: Transaction creation
      operationId: post-payments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCreateResponse'
              examples:
                Example:
                  value:
                    data:
                      request_id: c02e79a2-d30c-46e3-b3dd-c0e6a987acf8
                      status: '2'
                      err_msg: 'null'
        '401':
          description: Your Access Token does not have access
        '403':
          description: Your Identify Key does not have enough rights to perform the operation
        '422':
          description: Incorrect data
      description: Transaction creation
      parameters:
        - schema:
            type: string
            example: Bearer <jwt-token>
          in: header
          name: Authorization
          required: true
        - schema:
            type: string
            example: application/json
          in: header
          required: true
          name: Content-Type
        - schema:
            type: string
            example: application/json
          in: header
          name: Accept
          required: true
        - schema:
            type: string
            example: XMLHttpRequest
          in: header
          name: X-Requested-With
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateRequest'
            examples: {}
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
          text/html:
            schema:
              type: object
              properties: {}
          text/plain:
            schema:
              type: object
              properties: {}
          application/EDI-X12:
            schema:
              type: object
              properties: {}
        description: ''
      tags:
        - Payments
    get:
      summary: Getting transaction status
      operationId: get-payments
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Transaction status
      tags:
        - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionStatusRequest'
            examples: {}
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: ''
      parameters:
        - schema:
            type: string
            example: Bearer <jwt-token>
          in: header
          name: Authorization
          description: ''
          required: true
        - schema:
            type: string
            example: application/json
          in: header
          name: Content-Type
          description: ''
          required: true
        - schema:
            type: string
            example: XMLHttpRequest
          in: header
          name: X-Requested-With
          required: true
        - schema:
            type: string
            example: application/json
          in: header
          name: Accept
          required: true
      security:
        - Bearer Token: []
          Idetntify Key: []
    parameters: []
  /oauth/user/balance:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: string
                  real_balance:
                    type: string
                  credit_balance:
                    type: string
      operationId: get-oauth-user-balance
      security:
        - User Authorization:
            - user.balance
      description: getting current state of users' balance
components:
  schemas:
    TransactionCreateResponse:
      title: Transaction creation scheme (response)
      type: object
      properties:
        data:
          type: object
          properties:
            request_id:
              type: string
            status:
              type: string
            err_msg:
              type: string
            uuid:
              type: string
              format: uuid
              description: 'Transaction ID, use it for batch transfer of transactions.'
      x-examples:
        Example:
          data:
            request_id: c02e79a2-d30c-46e3-b3dd-c0e6a987acf8
            status: 2
            err_msg: null
        example-2:
          data:
            request_id: c02e79a2-d30c-46e3-b3dd-c0e6a987acf8
            status: 3
            err_msg: 3000
      description: ''
    TransactionCreateRequest:
      title: Transaction creation scheme
      type: object
      x-examples: {}
      description: ''
      properties:
        identify:
          type: string
          description: 'To get an Identify Key, contact our support.'
        purpose:
          type: integer
          enum:
            - 1
            - 2
          example: 1
        request_id:
          type: string
          minLength: 16
          maxLength: 255
          description: randomly generated unique line
        description:
          type: string
          description: message of withdrawal of funds from your Ezzy account. Will be displayed in the  _Transactions_ tab in Ezzy
        data:
          type: array
          items:
            type: object
            properties:
              wallet:
                type: string
                description: existing wallet number of the Ezzy system user
                minLength: 16
                maxLength: 16
              amount:
                type: string
              description:
                type: string
                description: message about the funds receipt. Will be displayed in the _Transactions_ tab in Ezzy
              uuid:
                type: string
                format: uuid
                description: 'Transaction ID, use it for batch transfer of transactions.'
            required:
              - wallet
              - amount
              - description
      required:
        - identify
        - purpose
        - request_id
        - description
        - data
    TransactionStatusRequest:
      title: TarnsactionStatusRequest
      type: object
      properties:
        identify:
          type: string
        request_id:
          type: string
          minLength: 16
          maxLength: 255
          example: c02e79a2-d30c-46e3-b3dd-c0e6a987acf8
      required:
        - identify
        - request_id
      x-examples:
        example: {}
      description: ''
    Country:
      title: Country
      type: object
      description: ''
      properties:
        id:
          type: number
        youtube_id:
          type: string
        code:
          type: string
        name:
          type: string
        order:
          type: number
        flag:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - youtube_id
        - code
        - name
        - order
        - flag
        - created_at
        - updated_at
    Profile:
      title: Profile
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
        first_name:
          type: string
        last_name:
          type: string
        name:
          type: string
          description: first_name last_name
        region:
          type: string
        city:
          type: string
        address:
          type: string
        lang:
          type: string
        tax_id:
          type: string
        business_id:
          type: string
        is_real_address:
          type: boolean
        province:
          type: string
        real_province:
          type: string
        real_city:
          type: string
        real_adress:
          type: string
        real_postcode:
          type: string
        postcode:
          type: string
      required:
        - id
        - user_id
        - first_name
        - last_name
        - name
        - region
        - city
        - address
        - lang
        - tax_id
        - business_id
        - is_real_address
        - province
        - postcode
    Contact:
      title: Contact
      type: object
      properties:
        id:
          type: number
        user_id:
          type: number
        network:
          type: string
        link:
          type: string
      required:
        - id
        - user_id
        - network
        - link
  securitySchemes:
    User Authorization:
      type: oauth2
      flows:
        authorizationCode:
          tokenUrl: 'https://ezzy.co/oauth/token'
          scopes:
            user.common: ''
            user.channels: ''
            user.contacts: ''
            user.balance: ''
          authorizationUrl: 'https://ezzy.co/oauth/authorize'
    Bearer Token:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://ezzy.co/oauth/token'
          scopes: {}
    Idetntify Key:
      name: identify
      type: apiKey
      in: query
  examples: {}
tags:
  - name: Auth
  - name: User
  - name: Payments
security: []
